drop policy if exists "Users can view their own agency" on "public"."agencies";

drop policy if exists "Admins can manage users based on JWT role" on "public"."users";

drop policy if exists "Users can view their own profile" on "public"."users";

drop policy if exists "Admins can manage agencies based on JWT role" on "public"."agencies";

create table "public"."test" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."test" enable row level security;

CREATE UNIQUE INDEX test_pkey ON public.test USING btree (id);

alter table "public"."test" add constraint "test_pkey" PRIMARY KEY using index "test_pkey";

grant delete on table "public"."test" to "anon";

grant insert on table "public"."test" to "anon";

grant references on table "public"."test" to "anon";

grant select on table "public"."test" to "anon";

grant trigger on table "public"."test" to "anon";

grant truncate on table "public"."test" to "anon";

grant update on table "public"."test" to "anon";

grant delete on table "public"."test" to "authenticated";

grant insert on table "public"."test" to "authenticated";

grant references on table "public"."test" to "authenticated";

grant select on table "public"."test" to "authenticated";

grant trigger on table "public"."test" to "authenticated";

grant truncate on table "public"."test" to "authenticated";

grant update on table "public"."test" to "authenticated";

grant delete on table "public"."test" to "service_role";

grant insert on table "public"."test" to "service_role";

grant references on table "public"."test" to "service_role";

grant select on table "public"."test" to "service_role";

grant trigger on table "public"."test" to "service_role";

grant truncate on table "public"."test" to "service_role";

grant update on table "public"."test" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."agencies"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."agencies"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for users based on email"
on "public"."agencies"
as permissive
for update
to authenticated
using (((( SELECT auth.jwt() AS jwt) ->> 'email'::text) = email))
with check (((( SELECT auth.jwt() AS jwt) ->> 'email'::text) = email));


create policy "Restrict access to test table"
on "public"."test"
as permissive
for all
to public
using (false);


create policy "Users and superadmins can read users"
on "public"."users"
as permissive
for select
to authenticated
using (((auth.uid() = auth_user_id) OR (((auth.jwt() -> 'app_metadata'::text) ->> 'role'::text) = 'superadmin'::text) OR ((auth.jwt() ->> 'role'::text) = 'superadmin'::text) OR (((auth.jwt() -> 'raw_app_meta_data'::text) ->> 'role'::text) = 'superadmin'::text)));


create policy "Admins can manage agencies based on JWT role"
on "public"."agencies"
as permissive
for all
to public
using ((((((auth.jwt() ->> 'app_metadata'::text))::jsonb ->> 'role'::text) = 'superadmin'::text) OR (id = ((((auth.jwt() ->> 'app_metadata'::text))::jsonb ->> 'agency_id'::text))::uuid)))
with check (((((auth.jwt() ->> 'app_metadata'::text))::jsonb ->> 'role'::text) = 'superadmin'::text));



